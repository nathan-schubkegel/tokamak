<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>

<head>
	<title>adamdawes.com - Tokamak Physics - Tutorial 4</title>
    	<link rel="stylesheet" href="/styles/adamdawes.css?version=20090606" type="text/css" media="all">
	<link rel="stylesheet" type="text/css" href="/styles/menus.css?version=20090606">
	<!--[if IE]>
	<link rel="stylesheet" type="text/css" href="/styles/menusie.css">
	<![endif]-->
	<link href="/rss.html" rel="alternate" type="application/rss+xml" title="rss" />
</head>


<body>

    <div id="copyright"></div>

<table id="layoutTable" cellpadding="0" cellspacing="0">
<tr><td class="leftColumn">

	<a href="/index.html" class="logo"></a><a class="logo-preload"></a>
	&nbsp;

	<!-- Windows software -->
	<div class="menu">
	<ul>
	  <li><a href="/windows/index.html" title="Windows software"><div class="headerWindows"></div></a>
	    <ul>
	      <li><div class="linksWindows"><a class="linkpopup" href="/windows8/index.html">Windows 8 software</a></div>
	        <ul>
	        <li><div class="headerSubMenu"></div></li>
	        <li><div class="linksSubMenuTitle">Applications</div></li>
	        <li><div class="linksSubMenu"><a href="/windows8/win8_rsscentral.html" title="Powerful RSS feed reader">RSS Central</a></div></li>
	        <li><div class="linksSubMenuTitle">Games</div></li>
	        <li><div class="linksSubMenu"><a href="/windows8/win8_tilefall.html" title="Addictive tile-based strategy game">Tile Fall</a></div></li>
	        <li><div class="linksSubMenu"><a href="/windows8/win8_frotz8.html" title="An interpreter for Interactive Fiction games">Frotz8</a></div></li>
	        <li><div class="linksSubMenu"><a href="/windows8/win8_wordsup.html" title="A fun strategic word game for between 2 and 4 players">WordsUp</a></div></li>
	        <li><div class="footerSubMenu"></div></li>
	        </ul>
	      </li>
	      <li><div class="linksWindows"><a class="linkpopup" href="/books/index.html">Windows 8 Books</a></div>
	        <ul>
	        <li><div class="headerSubMenu"></div></li>
	        <li><div class="linksSubMenu"><a href="/books/w8wp8gamedev.html" title="Windows 8 and Windows Phone 8 Game Development">Windows 8 and Windows Phone 8 Game Development</a></div></li>
	        <li><div class="footerSubMenu"></div></li>
	        </ul>
	      </li>
	      <li><div class="linksWindows"><a class="linkpopup" href="/windows/index.html">Windows software</a></div>
	        <ul>
	        <li><div class="headerSubMenu"></div></li>
	        <li><div class="linksSubMenuTitle">Applications</div></li>
	        <li><div class="linksSubMenu"><a href="/windows/win_tellyprompter.html" title="UK TV listings guide and reminder service">TellyPrompter</a></div></li>
	        <li><div class="linksSubMenuTitle">Children's</div></li>
	        <li><div class="linksSubMenu"><a href="http://www.icangames.com/ican/games/presskeys.html" title="Fun game for 1-3 year old children">I Can Press Keys</a></div></li>
	        <li><div class="linksSubMenuTitle">Games</div></li>
	        <li><div class="linksSubMenu"><a href="/windows/win_hpursuit.html" title="Fast-paced action-packed arcade driving game">Highway Pursuit</a></div></li>
	        <li><div class="linksSubMenu"><a href="/windows/win_tilefall.html" title="Addictive tile-based strategy game">Tile Fall</a></div></li>
	        <li><div class="linksSubMenuTitle">Screen savers</div></li>
	        <li><div class="linksSubMenu"><a href="/windows/win_scr_polymorf3d.html" title="An endless parade of spinning multicoloured 3D shapes">Polymorf 3D</a></div></li>
	        <li><div class="linksSubMenu"><a href="/windows/win_scr_snowfall.html" title="A shower of beautiful snowflakes">SnowFall</a></div></li>
	        <li><div class="linksSubMenu"><a href="/windows/win_scr_twinklegl.html" title="Showers of coloured stars">TwinkleGL</a></div></li>
	        <li><div class="footerSubMenu"></div></li>
	        </ul>
	      </li>
	    </ul>
	  </li>
	  <li><div class="footerWindows"></div>
	</ul>
	</div>
	<!-- Windows Phone -->
	<div class="menu">
	<ul>
	  <li><a href="/wp7/index.html" title="Windows Phone software"><div class="headerWindowsMobile"></div></a>
	    <ul>

	      <li><div class="titleWindowsMobile">Windows Phone</div>

	      <li><div class="linksWindowsMobile"><a class="linkpopup" href="/wp7/index.html">Software</a></div>
	        <ul>
	        <li><div class="headerSubMenu"></div></li>
	        <li><div class="linksSubMenuTitle">Applications</div></li>
	        <li><div class="linksSubMenu"><a href="/wp7/wp7_rsscentral.html" title="Powerful RSS feed reader">RSS Central</a></div></li>
	        <li><div class="linksSubMenuTitle">Games</div></li>
	        <li><div class="linksSubMenu"><a href="/wp7/wp7_tilefall.html" title="Addictive tile-based strategy game">Tile Fall</a></div></li>
	        <li><div class="linksSubMenu"><a href="/wp7/wordsup.html" title="Fun strategic word game for two to four players">WordsUp</a></div></li>
	        <li><div class="footerSubMenu"></div></li>
	        </ul>
	      </li>

	      <li><div class="linksWindowsMobile"><a class="linkpopup" href="/books/index.html">Books</a></div>
	        <ul>
	        <li><div class="headerSubMenu"></div></li>
	        <li><div class="linksSubMenu"><a href="/books/wp7gamedev.html" title="Windows Phone 7 Game Development">Windows Phone 7 Game Development</a></div></li>
	        <li><div class="linksSubMenu"><a href="/books/w8wp8gamedev.html" title="Windows 8 and Windows Phone 8 Game Development">Windows 8 and Windows Phone 8 Game Development</a></div></li>
	        <li><div class="footerSubMenu"></div></li>
	        </ul>
	      </li>

	      <li><div class="sepWindowsMobile"></div>
	      <li><div class="titleWindowsMobile">Windows Mobile</div>

	      <li><div class="linksWindowsMobile"><a class="linkpopup" href="/windowsmobile/index.html">Software</a></div>
	        <ul>
	        <li><div class="headerSubMenu"></div></li>
	        <li><div class="linksSubMenuTitle">Games</div></li>
	        <li><div class="linksSubMenu"><a href="/windowsmobile/winmob_gemdrops.html" title="Fun and frantic puzzle game">GemDrops</a></div></li>
	        <li><div class="linksSubMenu"><a href="/windowsmobile/winmob_pocketzax.html" title="An interpreter for interactive fiction adventure games">PocketZax</a></div></li>
	        <li><div class="linksSubMenu"><a href="/windowsmobile/winmob_tilefall.html" title="Addictive tile-based strategy game">Tile Fall</a></div></li>
	        <li><div class="footerSubMenu"></div></li>
	        </ul>
	      </li>

	      <li><div class="linksWindowsMobile"><a class="linkpopup" href="/books/index.html">Books</a></div>
	        <ul>
	        <li><div class="headerSubMenu"></div></li>
	        <li><div class="linksSubMenu"><a href="/books/wmgamedev.html" title="Windows Mobile Game Development">Windows Mobile Game Development</a></div></li>
	        <li><div class="footerSubMenu"></div></li>
	        </ul>
	      </li>
	    </ul>
	  </li>
	  <li><div class="footerWindowsMobile"></div>
	</ul>
	</div>
	<!-- Programming -->
	<div class="menu">
	<ul>
	  <li><a href="/programming/index.html" title="Programming"><div class="headerProgramming"></div></a>
	    <ul>
	      <li><div class="linksProgramming"><a class="linkpopup" href="/books/index.html">Books</a></div>
	        <ul>
	        <li><div class="headerSubMenu"></div></li>
	        <li><div class="linksSubMenu"><a href="/books/wmgamedev.html" title="Windows Mobile Game Development">Windows Mobile Game Development</a></div></li>
	        <li><div class="footerSubMenu"></div></li>
	        </ul>
	      </li>
	      <li><div class="linksProgramming"><a class="link" href="/programming/tokamak/index.html">Tokamak Physics</a></div></li>
	      <li><div class="linksProgramming"><a class="link" href="/programming/vs2005/index.html">Visual Studio</a></div></li>
	      <li><div class="linksProgramming"><a class="link" href="/programming/vb/index.html">Visual Basic 6</a></div></li>
	      <li><div class="linksProgramming"><a class="link" href="/programming/windows/index.html">Windows</a></div></li>
	      <li><div class="linksProgramming"><a class="link" href="/programming/opl/index.html">OPL</a></div></li>
	    </ul>
	  </li>
	  <li><div class="footerProgramming"></div>
	</ul>
	</div>
	<!-- Retro gaming -->
	<div class="menu">
	<ul>
	  <li><a href="/retrogaming/index.html" title="Retro gaming"><div class="headerRetrogaming"></div></a>
	    <ul>
	      <li><div class="linksRetrogaming"><a class="linkpopup" href="/retrogaming/index.html">Retro Gamer articles</a></div>
	        <ul>
	        <li><div class="headerSubMenu"></div></li>
	        <li><div class="linksSubMenu"><a href="/retrogaming/rg_04_pias.html" title="An article exploring the music chip from the Commodore 64">Play it again, SID</a></div></li>
	        <li><div class="linksSubMenu"><a href="/retrogaming/rg_08_bubblebobble.html" title="A trip to the wonderful world of Taito's Bubble Bobble">Bubble Trouble</a></div></li>
	        <li><div class="linksSubMenu"><a href="/retrogaming/rg_17_playtowin.html" title="Ever wondered who won all those fantastic 80s game competitions?">Play to Win</a></div></li>
	        <li><div class="footerSubMenu"></div></li>
	        </ul>
	      </li>
	      <li><div class="linksRetrogaming"><a class="linkpopup" href="/retrogaming/index.html">Arcade projects</a></div>
	        <ul>
	        <li><div class="headerSubMenu"></div></li>
	        <li><div class="linksSubMenu"><a href="/retrogaming/mamecab.html" title="My upright MAME arcade cabinet">MAME Cabinet</a></div></li>
	        <li><div class="linksSubMenu"><a href="/retrogaming/drivingcab.html" title="A sit-down 'cockpit'-style driving cabinet">Driving Cabinet</a></div></li>
	        <li><div class="footerSubMenu"></div></li>
	        </ul>
	      </li>
	      <li><div class="linksRetrogaming"><a class="linkpopup" href="/retrogaming/index.html">Game guides</a></div>
	        <ul>
	        <li><div class="headerSubMenu"></div></li>
	        <li><div class="linksSubMenu"><a href="/retrogaming/bbguide/index.html" title="Complete level guide for Bubble Bobble">Bubble Bobble</a></div></li>
	        <li><div class="footerSubMenu"></div></li>
	        </ul>
	      </li>
	    </ul>
	  </li>
	  <li><div class="footerRetrogaming"></div>
	</ul>
	</div>
	<!-- Ringtones -->
<!--
	<div class="menu">
	<ul>
	  <li><a href="/nokia/index.html" title="Ring-tones"><div class="headerRingtones"></div></a>
	    <ul>
	      <li><div class="linksRingtones"><a class="link" href="/nokia/tones.html">Polyphonic ring-tones</a></div></li>
	      <li><div class="linksRingtones"><a class="link" href="/nokia/howto_ringtones_index.html">Transferring via WAP</a></div></li>
	    </ul>
	  </li>
	  <li><div class="footerRingtones"></div>
	</ul>
	</div>
-->
	<!-- Psion software -->
	<div class="menu">
	<ul>
	  <li><a href="/psion/index.html" title="Psion software"><div class="headerPsion"></div></a>
	    <ul>
	      <li><div class="linksPsion"><a class="linkpopup" href="/psion/index.html">EPOC software</a></div>
	        <ul>
	        <li><div class="headerSubMenu"></div></li>
	        <li><div class="linksSubMenu"><a href="/psion/epoc_tilefall.html" title="Addictive tile-based strategy game">Tile Fall</a></div></li>
	        <li><div class="linksSubMenu"><a href="/psion/epoc_reaction.html" title="Explosive turn-based strategy game">Chain Reaction</a></div></li>
	        <li><div class="linksSubMenu"><a href="/psion/epoc_blobs.html" title="Fast paced Tetris-style game">Blobs</a></li>
	        <li><div class="footerSubMenu"></div></li>
	        </ul>
	      </li>
	      <li><div class="linksPsion"><a class="linkpopup" href="/psion/index.html">SIBO software</a></div>
	        <ul>
	        <li><div class="headerSubMenu"></div></li>
	        <li><div class="linksSubMenu"><a href="/psion/sibo_tilefall.html" title="Addictive tile-based strategy game">Tile Fall</a></div></li>
	        <li><div class="linksSubMenu"><a href="/psion/sibo_reaction.html" title="Explosive turn-based strategy game">Chain Reaction</a></div></li>
	        <li><div class="footerSubMenu"></div></li>
	        </ul>
	      </li>
	    </ul>
	  </li>
	  <li><div class="footerPsion"></div>
	</ul>
	</div>
	<!-- Amiga -->
	<div class="menu">
	<ul>
	  <li><a href="/amiga/index.html" title="Amiga software"><div class="headerAmiga"></div></a>
	    <ul>
	      <li><div class="linksAmiga"><a class="link" href="/amiga/index.html">Amiga software</a></div></li>
	    </ul>
	  </li>
	  <li><div class="footerAmiga"></div>
	</ul>
	</div>
	<!-- Miscellaneous -->
	<div class="menu">
	<ul>
	  <li><a href="/misc/index.html" title="Miscellaneous"><div class="headerMisc"></div></a>
	    <ul>
	      <li><div class="linksMisc"><a class="link" href="/oldnews.html">Old news</a></div></li>
	      <li><div class="linksMisc"><a class="link" href="/misc/links.html">Links</a></div></li>
	      <li><div class="linksMisc"><a class="link" href="/misc/donate.html">Donate</a></div></li>
	      <li><div class="linksMisc"><a class="link" href="/misc/contact.html">Contact me</a></div></li>
	    </ul>
	  </li>
	  <li><div class="footerMisc"></div>
	</ul>
	</div>
	<!-- Search -->
	<div class="navBox">
		<div class="headerSearch"></div>
		<div class="linksSearch" style="padding-bottom:8px">
			<div style="margin-left:6px">
			<!-- SiteSearch Google -->
			<FORM method=GET action="http://www.google.com/search">
			<input type=hidden name=ie value=UTF-8>
			<input type=hidden name=oe value=UTF-8>
			<center>
			
			<A HREF="http://www.google.com/"><img style="margin-bottom:10px" src="/styles/images/google-logo.gif" width="81" height="34" alt="Google" border="0"></A><br>
			<INPUT TYPE=text name=q size=21 maxlength=255 value="" style="text-align: center">
			<INPUT style="margin-top:5px" type=submit name=btnG VALUE="Search this site">
			<input type=hidden name=domains value="adamdawes.com"><input type=hidden name=sitesearch value="adamdawes.com" checked>
			</center>
			</FORM>
			<!-- SiteSearch Google -->
			</div>
		</div>
		<div class="footerSearch"></div>
	</div>


    <div class="headerSubMenu-preload"></div>
    <div class="linksSubMenu-preload"></div>
    <div class="footerSubMenu-preload"></div>

	
	<div id="minilogo"></div>
	
	
	
</td>
<td class="rightColumn">

	<div id="topNavigation">
		<div id="utilityLinks">
			<a href="/misc/contact.html" class="contact"></a>
			<a href="/misc/contact.html" class="contact-preload"></a>
			<a href="/index.html" class="home"></a>
			<a href="/index.html" class="home-preload"></a>
			<a href="http://twitter.com/AdamDawes575" style="float: right; height: 36px; overflow: hidden; margin-right: 20px;">
				<img src="/styles/images/twitter.png" />
		 	</a>
		 	<br clear="all">
		</div>
	</div>

	<div id="contentHeader">
		<div id="contentHeaderLeft"></div>
		<div id="contentHeaderMid"></div>
		<div id="contentHeaderRight"></div>
	</div>
	<div id="contentFrame">
	
		<div id="content">

    <!-- PAGE CONTENT STARTS HERE -->

    <div id="breadcrumbs"><a href="/index.html">Home</a><a href="../index.html">Programming</a><a href="index.html">Tokamak Physics</a>Tutorial 4, terrain mesh</div>

	<img align="right" src="files/TutImage4.jpg" alt="Tutorial screenshot">
	<h2>Tutorial 4, terrain mesh</h2>
	
	<p>Up until now, we've dropped our rigid bodies over a flat floor formed by 
	a single animated body. Tokamak allows us to create much more complex 
	surfaces, however, known as a Terrain Mesh.</p>

	<p>A terrain mesh is a set of triangles that are used to determine the shape 
	of the ground onto which your rigid bodies will fall. It isn't limited to 
	just the ground, of course; you could use it to form the walls and ceiling 
	of a room too, or even the roads and buildings of a city. It is commonly 
	used to form hills and valleys or landscapes, though, and hence the name 
	"terrain" mesh.</p>

	<p>Unlike an animated body (which can only be composed of the standard 
	Tokamak primitives -- cubes, spheres and cylinders) a terrain mesh can be 
	any shape at all. Although you can only have a single terrain mesh, there's 
	no need for all of the triangles to touch one another, so the mesh could 
	have any number of independent sections.</p>

	<p>The terrain mesh can also be as large and complex as you like, but (of 
	course) the more complex your mesh becomes, the more processing time Tokamak 
	will require in order to determine if anything has collided with it. For 
	very complex meshes, a better approach is to use a callback function to 
	provide more specific control over mesh collisions. This callback will be 
	examined in a later tutorial.</p>

	<p>In this tutorial we will construct a random "landscape" and drop a number 
	of spheres from above in order to see how they interact with the 
	terrain.</p>

	<h3>How are we building our terrain mesh?</h3>
	
	<p>We'll create our landscape as a grid of squares. Each square will of 
	course be divided into two as Tokamak's terrain mesh is defined using 
	triangles. As mentioned above, the mesh can be any shape you require, 
	there's no need to stick to the rigid grid approach I'm using here.</p>

	<p>The basic layout of our mesh will be as follows:</p>
	
	<p align="center"><img src="files/04_MeshOverview.gif" alt="Mesh overview"></p>

	<p>Although the quads within the mesh form a 3x3 grid, the mesh is actually 
	a 4x4 mesh as we need to define the positions of the vertices rather than 
	the positions of the triangles. Also note that we're using the x and z axes 
	to represent the top-down view of the mesh, as we'll use the y-axis to 
	represent the height of each of our mesh nodes. With the heights applied to 
	the y-axis and the terrain rendered with a perspective projection, this is 
	the type of thing we'll be trying to produce:</p>
	
	<p align="center"><img src="files/04_MeshPerspective.gif" alt="Mesh perspective"></p>

	<p>Let's get started with the code. First of all, we'll define two constants to define the number of
	vertices along the x and z axes.</p>
	
	<br clear="all">

<blockquote class="code">
// Terrain vertex details
#define TERRAINX 4
#define TERRAINZ 4
</blockquote>

	<p>The sample provided with this tutorial uses a larger mesh than this, but 
	it is simply a matter of adjusting these two constants.</p>

	<p>Next we'll define a couple of calculated constants that let us easily 
	determine how many vertices and triangles there are within our mesh. We will 
	need these both when we're generating and drawing the mesh so it makes sense 
	to define these calculations just once. We also define the size of the 
	terrain (how far across the x and z axes the mesh extends) and the maximum 
	height of each of the terrain vertices.</p>
	
<blockquote class="code">
// The terrain vertex count is simply the number of height nodes we have
#define TERRAIN_VERTEXCOUNT (TERRAINX * TERRAINZ)
// The triangle count is the number of quads (which is one
// less than each dimension of the terrain vertex map) multiplied
// by two (as we need two triangles to make up each quad).
#define TERRAIN_TRIANGLECOUNT ((TERRAINX-1)*(TERRAINZ-1)*2)

// The size (x- and z-axes) and height (y-axis) for the terrain
#define TERRAINSIZE 25.0f
#define TERRAINHEIGHT 10
</blockquote>

	<p>Finally for this section of code, an array of floats to hold the heights 
	of each vertex. For the tutorial we will just fill this array with random 
	values (in the <code>SetTerrainHeights()</code> function later on), but if 
	you wanted to design your own mesh you could pre-load the array values here 
	instead of setting them up in code.
	
<blockquote class="code">
float gfTerrainHeights[TERRAINX][TERRAINZ];
</blockquote>


	<h3>Defining the mesh</h3>

	<p>The terrain mesh is created using an <code>neTriangleMesh</code> object. 
	Once initialised, this is simply passed to the Tokamak simulator using the 
	<code>SetTerrainMesh()</code> function instead of setting up the animated 
	body that would previously have formed the floor. In the sample code, this 
	takes place in the <code>BuildTerrainMesh()</code> function, which is called 
	from within <code>InitPhysics</code>. This section will focus on how to 
	initialise the <code>neTriangleMesh</code> object.</p>

	<p>The object has four members:</p>

<blockquote class="code">
    neV3 *vertices;
    s32 vertexCount;
    neTriangle *triangles;
    s32 triangleCount;
</blockquote>

	<p>The <code>vertices</code> member is a pointer to an array of 
	<code>neV3</code> objects. This is just a type that can be used to store an 
	x, y and z position, and so this is what we will use to store the positions 
	of each vertex that makes up the triangle mesh. Note that these are absolute 
	positions in space; a terrain mesh cannot be translated, scaled or rotated 
	in the way that an animated body can.</p>

	<p><code>vertexCount</code> simply allows us to tell Tokamak how many items 
	are present within the <code>vertices</code> array.</p>

	<p><code>triangles</code> is a pointer to an array of 
	<code>neTriangle</code> objects. Each triangle is defined by referencing the 
	vertices that we have provided in the <code>vertices</code> array. The 
	<code>neTriangle</code> objects will be examined in more detail when we get 
	to the code that builds this array shortly.</p>

	<p><code>triangleCount</code> allows us to tell Tokamak how many triangles 
	are present within the <code>triangles</code> array.</p>

	<p>Once we've fully populated the members of this object, we can pass it to 
	Tokamak ready for it to use. <code>BuildTerrainMesh()</code> begins as 
	follows. After declaring the variables we are going to use, we call into 
	<code>SetTerrainHeights()</code> in order to generate some random height 
	values for each of our terrain vertices.</p>
    
<blockquote class="code">
void BuildTerrainMesh(void)
{
    int iTriIndex;
    float fTerrainX, fTerrainZ;
    int x,z;
    // Declare a terrain mesh for the floor
    neTriangleMesh triMesh;
    // The array of vertices
    neV3 triVertices[TERRAIN_VERTEXCOUNT];
    // The array of triangles
    neTriangle triData[TERRAIN_TRIANGLECOUNT];

    // First set the terrain node heights
    SetTerrainHeights();
</blockquote>
    
	<p>Setting the number of vertices is easy, we already defined a constant for 
	this value above.</p>

<blockquote class="code">
    // Set the number of vertices into the triMesh
    triMesh.vertexCount = TERRAIN_VERTEXCOUNT;
</blockquote>

	<p>Next we need to calculate the position for each vertex. We'll loop on the 
	x and z axes in order to cover each vertex. To calculate the x and z 
	position we'll use two variables, <code>fTerrainX</code> and 
	<code>fTerrainZ</code>, which we'll update after each iteration of the loop 
	to ensure they're in the right place. They will start at half the terrain 
	size one side of each axis and will be increased until they are half the 
	terrain size on the other side, making the total size equal to the defined 
	terrain size.</p>

	<p>All we do within the loop is set the coordinate of each vertex, using the 
	x and z positions from our loop and the y position from our 
	<code>gfTerrainHeights</code> array. We are building the vertex array as a 
	one-dimensional array rather than using two dimensions. The reason for this 
	is that we will later need to specify an index for each vertex, and we are 
	only able to use a single number for this. To build the two-dimensional data 
	into a one-dimensional array, we multiply the z array index by the number of 
	elements in the x part of the array (<code>TERRAIN_X</code>), resulting in 
	the index being calculated as follows:</p>
	
	<blockquote>
		<table cellspacing="0" border="1">
			<tr><td><b>x</b></td><td><b>z</b></td><td><b>result</b></td></tr>
			<tr><td>0</td><td>0</td><td>0 + (0*4) = 0</td></tr>
			<tr><td>1</td><td>0</td><td>1 + (0*4) = 1</td></tr>
			<tr><td>2</td><td>0</td><td>2 + (0*4) = 2</td></tr>
			<tr><td>3</td><td>0</td><td>3 + (0*4) = 3</td></tr>
			<tr><td>0</td><td>1</td><td>0 + (1*4) = 4</td></tr>
			<tr><td>1</td><td>1</td><td>1 + (1*4) = 5</td></tr>
			<tr><td>2</td><td>1</td><td>2 + (1*4) = 6</td></tr>
			<tr><td>3</td><td>1</td><td>3 + (1*4) = 7</td></tr>
			<tr><td>0</td><td>2</td><td>0 + (2*4) = 8</td></tr>
			<tr><td>...</td><td>...</td><td>...</td></tr>
			<tr><td>2</td><td>3</td><td>2 + (3*4) = 14</td></tr>
			<tr><td>3</td><td>3</td><td>3 + (3*4) = 15</td></tr>
		</table>
	</blockquote></p>

	<p>At the end of the loop, we put the address of the array into the triangle 
	mesh's <code>vertices</code> member.</p>

<blockquote class="code">
    // Set the vertex values
    fTerrainZ = -TERRAINSIZE/2;
    for (z=0; z&lt;TERRAINZ; z++)
    {
        fTerrainX = -TERRAINSIZE/2;
        for (x=0; x&lt;TERRAINX; x++)
        {
            triVertices[x + z*TERRAINX].Set(fTerrainX, gfTerrainHeights[x][z], fTerrainZ);
            fTerrainX += (TERRAINSIZE / (TERRAINX-1));
        }
        fTerrainZ += (TERRAINSIZE / (TERRAINZ-1));
    }
    // Set the vertices into the triMesh
    triMesh.vertices = triVertices;
</blockquote>

	<p>That's the vertices set, next we have to tell Tokamak how to join them 
	together to make up the triangles that will form the mesh. The first part is 
	to set the number of triangles into the <code>triangleCount</code> property 
	of the triangle mesh:</p>

<blockquote class="code">
    // Set the number of triangles into the triMesh
    triMesh.triangleCount = TERRAIN_TRIANGLECOUNT;
</blockquote>

	<p>Next we provide the triangle data itself. The indices are provided to 
	Tokamak using an array of neTriangle objects, which we'll then set into the 
	triangle mesh. Each triangle is defined by specifying the vertex indices 
	that form the three corners of the triangle. The way we have set up our 
	vertex array means that the vertices are numbered as follows:</p>
	
	<p align="center"><img src="files/04_MeshVertices.gif" alt="Mesh vertices"></p>

	<p>To define the first triangle, we therefore provide vertex indices 0, 1 
	and 4. The matching triangle that completes the first quad uses indices 1, 4 
	and 5. The second pair of triangles uses vertex indices 1, 2 and 5, and then 
	2, 5 and 6.</p>

	<p>The next block of code loops through our terrain to determine the vertex 
	indices required to create each triangle. In addition to these indices we 
	also set the material that we want to use for each triangle, and a "flag" 
	value. The flag must always be set to 
	<code>neTriangle::NE_TRI_TRIANGLE</code>. Once we've constructed the array, 
	we put its address into the <code>triangles</code> property of the triangle 
	mesh.</p>

<blockquote class="code">
    // Set the triangle values
    iTriIndex = 0;
    for (x=0; x&lt;TERRAINX-1; x++)
    {
        for (z=0; z&lt;TERRAINZ-1; z++)
        {
            // Make the triangle for the first half of the quad
            triData[iTriIndex].indices[0] = x     + z    *TERRAINX;
            triData[iTriIndex].indices[1] = x     + (z+1)*TERRAINX;
            triData[iTriIndex].indices[2] = (x+1) + z    *TERRAINX;
            triData[iTriIndex].materialID = 0;
            triData[iTriIndex].flag = neTriangle::NE_TRI_TRIANGLE;
            // Move to the next triangle in the array
            iTriIndex += 1;
            // Make the triangle for the second half of the quad
            triData[iTriIndex].indices[0] = x     + (z+1)*TERRAINX;
            triData[iTriIndex].indices[1] = (x+1) + (z+1)*TERRAINX;
            triData[iTriIndex].indices[2] = (x+1) + z    *TERRAINX;
            triData[iTriIndex].materialID = 0;
            triData[iTriIndex].flag = neTriangle::NE_TRI_TRIANGLE;
            // Move to the next triangle in the array
            iTriIndex += 1;
        }
    }
    // Set the triangles into the triMesh
    triMesh.triangles = triData;
</blockquote>

	<p>It should be noted that terrain triangles are double-sided, the vertices 
	do not have to be wound in any particular direction (clockwise/anti-
	clockwise) in order for the terrain triangle to count.</p>

	<p>The triangle mesh is now fully populated, so we can finally pass it to 
	Tokamak for it to use.</p>

<blockquote class="code">
    // Tell the simulator about our mesh
    gSim->SetTerrainMesh(&amp;triMesh);
</blockquote>

	<p>It's not much good if we can't see the terrain though. Tokamak now knows 
	all about it, but we've not told DirectX anything yet.</p>

	<p>In all of these tutorials I'm trying to keep the Tokamak code and the 
	DirectX code as far apart as possible. This is so that the Tokamak code can 
	be seen clearly without any graphics API complexity, and also because I want 
	these tutorials to be easily converted to work with other graphics APIs such 
	as OpenGL. For this reason I haven't build the DirectX vertex buffer in the 
	loops shown above. In a "real" application, this may have been a more 
	efficient way to build the vertex data. However, I don't want to have to do 
	all that calculation again (it's increased complexity and a chance that the 
	Tokamak and DirectX views of what the terrain look like may get out-of-
	step). To generate the DirectX buffers as easily as possible I'm going to 
	read the values back from the triangle mesh.</p>

	<p>This is achieved in the <code>BuildTerrainDX()</code> function. I won't 
	go into great detail about this function as it's nothing to do specifically 
	with Tokamak, but as a quick overview I decided to use indexed primitives to 
	render the terrain in this program. The concept is virtually identical to 
	that used within the triangle mesh: we define a series of vertices (these go 
	in the vertex buffer) and a series of triangles (constructed using the 
	vertex indices). This means we can pretty much read the values straight out 
	of the triangle mesh and into the index and vertex buffers.</p>

	<p>For more information, take a look at the function in the code sample. The 
	code comments should make it clear what's happening.</p>

	<p>The last new function is a small one: <code>SetTerrainHeights()</code>, 
	as called at the beginning of <code>BuildTerrainMesh()</code>. This simply 
	applies a random height value to each entry in the 
	<code>gfTerrainHeights</code> array. If you wanted to try creating a more 
	interested algorithmic landscape, this is the place to put your code.</p>

	<h3>Rendering</h3>

	<p>We're nearly finished now, the simulator is ready to run, but there are a 
	couple more changes to be made within the <code>Render()</code> 
	function.</p>

	<p>One thing that happens frequently with this simulation is that the 
	spheres fall off the side of the landscape. Sometimes, in fact, the 
	landscape will funnel the spheres over the side, causing them to all fall 
	out of the scene. To stop things getting very empty, we'll catch the spheres 
	that fall and replace them above the terrain so that they can fall onto it 
	again.</p>

	<p>Finding the spheres that have fallen is easy: we simply check the 2nd 
	element (which corresponds to the y axis) of the <code>pos</code> array 
	within the transformation matrix returned by the rigid body's 
	<code>GetTransform()</code> call. If this value gets too low we reset the 
	position of the sphere using the <code>SetPos()</code> method.</p>

	<p>Simply resetting the position isn't sufficient though, as the sphere will 
	retain the velocity and angular momentum (spin) from before we moved it. 
	This will mean it is initially falling very quickly, which isn't what I want 
	to achieve. To cancel out these properties we call the 
	<code>SetVelocity()</code> method with a vector containing the values 
	[0,0,0] (which means the velocity will be zero on each axis), and then 
	<code>SetAngularMomentum()</code> with another vector containing [0,0,0] 
	(which means that the spin is reduced to zero on each axis). This leaves the 
	sphere perfectly stationary at the moment of initialisation.</p>

<blockquote class="code">
            // Check the Y-position of the sphere.
            // If it falls too low then the sphere has fallen off of the floor;
            // we'll re-drop it if this occurs to keep things moving.
            if(t.pos[1] < -25)
            {
                // Reset the position of the sphere
                pos.Set((float)(rand()%10)-4, 20, (float)(rand()%10)-4);
                gSpheres[i]->SetPos(pos);
                // Reset the velocity (so it doesn't already have a downward momentum from before)
                vel.Set(0,0,0);
                gSpheres[i]->SetVelocity(vel);
                // Reset the angular momentum (so it isn't spinning from before);
                spin.Set(0,0,0);
                gSpheres[i]->SetAngularMomentum(spin);
            }
</blockquote>

	<p>The last new piece of code is required to render the terrain itself. This 
	simply sets the vertex and the index buffer, and then calls DirectX's 
	<code>DrawIndexedPrimitive</code> method. The number of vertices and 
	triangles are known from the constants we defined right back at the 
	beginning.</p>

<blockquote class="code">
        // Set the vertex and index stream for the floor
        gD3DDevice-&gt;SetStreamSource(0,vbFloor,sizeof(strVertex));
        gD3DDevice-&gt;SetIndices(ibFloor, 0);
        // Reset the view matrix to the identity matrix
        dxLoadIdentity();
        dxApplyMatrix(gD3DDevice);
        // Draw the floor
        gD3DDevice-&gt;DrawIndexedPrimitive(D3DPT_TRIANGLELIST,
                                            0, TERRAIN_VERTEXCOUNT,
                                            0, TERRAIN_TRIANGLECOUNT);
</blockquote>

	<p>Now run the code and see how it looks. Doesn't that just inspire you to 
	write a mini-golf game, or a new version of Marble Madness?</p>

	<p>That concludes this tutorial. The source code and a compiled executable for this tutorial are available in
	the following .zip file. </p>

	<p><center>
	<a href="files/TokamakTutorial4.zip"><img src="../../gfx/ico_zip.gif" border="0" alt="Zip icon"></a>
	<br>
	<a href="files/TokamakTutorial4.zip">TokamakTutorial4.zip</a>
	</center>

	<table width="100%">
	 <tr>
	  <td align="left">&lt;&lt; <a href="03_CylindersAndSpheres.html">Tutorial 3, cylinders and spheres</a> &lt;&lt;</td>
	  <td align="right">&gt;&gt; <a href="05_TerrainCallback.html">Tutorial 5, terrain callback</a> &gt;&gt;</td>
	 </tr>
	</table></p>

	<hr>
	
	<p>If you have any comments or suggestions regarding this article, please don't hesitate to <a href="../../misc/contact.html">contact me</a>.</p>
	<p align="right"><font size=-2>This article is copyright &copy; Adam Dawes, 2004.<br>It may not be copied or redistributed without my express written permission.</font></p>

    <!-- PAGE CONTENT ENDS HERE -->

    		</div>
		
	</div>

	<div id="contentFooter">
		<div id="contentFooterLeft"></div>
		<div id="contentFooterMid"></div>
		<div id="contentFooterRight"></div>
	</div>

</td></tr>
</table>

<script type="text/javascript">
//<![CDATA[
(function() {
	var links = document.getElementsByTagName('a');
	var query = '?';
	for(var i = 0; i < links.length; i++) {
		if(links[i].href.indexOf('#disqus_thread') >= 0) {
			query += 'url' + i + '=' + encodeURIComponent(links[i].href) + '&';
		}
	}
	document.write('<script charset="utf-8" type="text/javascript" src="http://disqus.com/forums/adamdawes/get_num_replies.js' + query + '"></' + 'script>');
})();
//]]>
</script>

</body>

</html>
